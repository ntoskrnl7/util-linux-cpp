/**
 * @file base64
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This module implements base64 class.
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */
#pragma once
#ifndef _EXT_BASE64_
#define _EXT_BASE64_

#include <algorithm>
#include <assert.h>
#include <memory>
#include <stdexcept>
#include <string>
#include <vector>

#define CXX_USE_STD_CSTDINT
#define CXX_USE_STD_MOVE
#define CXX_USE_STD_BYTE
#include "stl_compat"

namespace ext {
namespace encoding {
class base64 {
public:
#ifdef CXX_DEFAULT_TEMPLATE_ARGUMENTS_NOT_SUPPORTED
  template <typename D, typename T>
#else
  template <typename D = char, typename T>
#endif
  static std::basic_string<D> encode(const T *data) {
    return std::move(encode<D, T>(std::basic_string<T>(data)));
  }

#ifdef CXX_DEFAULT_TEMPLATE_ARGUMENTS_NOT_SUPPORTED
  template <typename D, typename T>
#else
  template <typename D = char, typename T>
#endif
  static std::basic_string<D> encode(const std::basic_string<T> &data) {
    return std::move(encode<D>(data.c_str(), data.size() * sizeof(T)));
  }

#ifdef CXX_DEFAULT_TEMPLATE_ARGUMENTS_NOT_SUPPORTED
  template <typename D, typename T>
#else
  template <typename D = char, typename T>
#endif
  static std::basic_string<D> encode(const T &data) {
    return std::move(encode<D>(&data, sizeof(T)));
  }

#ifdef CXX_DEFAULT_TEMPLATE_ARGUMENTS_NOT_SUPPORTED
  template <typename D>
#else
  template <typename D = char>
#endif
  static std::basic_string<D> encode(const std::vector<std::byte> &data) {
    return std::move(encode<D>(&data[0], data.size()));
  }

#ifdef CXX_DEFAULT_TEMPLATE_ARGUMENTS_NOT_SUPPORTED
  template <typename D>
#else
  template <typename D = char>
#endif
  static std::basic_string<D> encode(const void *data, size_t data_size) {
    static const char encoding_table[] = {
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
        'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
        'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'};

    const unsigned char *input = (const unsigned char *)data;
    size_t input_size = data_size;
    size_t i;
    std::basic_string<D> ret(4 * ((input_size + 2) / 3), D());
    D *p = const_cast<D *>(ret.c_str());
    for (i = 0; i < input_size - 2; i += 3) {
      *p++ = encoding_table[(input[i] >> 2) & 0x3F];
      *p++ = encoding_table[((input[i] & 0x3) << 4) |
                            ((int)(input[i + 1] & 0xF0) >> 4)];
      *p++ = encoding_table[((input[i + 1] & 0xF) << 2) |
                            ((int)(input[i + 2] & 0xC0) >> 6)];
      *p++ = encoding_table[input[i + 2] & 0x3F];
    }
    if (i < input_size) {
      *p++ = encoding_table[(input[i] >> 2) & 0x3F];
      if (i == (input_size - 1)) {
        *p++ = encoding_table[((input[i] & 0x3) << 4)];
        *p++ = '=';
      } else {
        *p++ = encoding_table[((input[i] & 0x3) << 4) |
                              ((int)(input[i + 1] & 0xF0) >> 4)];
        *p++ = encoding_table[((input[i + 1] & 0xF) << 2)];
      }
      *p++ = '=';
    }

    return std::move(ret);
  }

  template <typename D, typename T>
  static std::basic_string<D> decode(const std::basic_string<T> &data) {
    size_t in_len = get_size(data);
    if (in_len % 4 != 0)
      throw std::runtime_error("Data size is not a multiple of 4");

    size_t out_len = in_len / 4 * 3;
    if (data[in_len - 1] == '=')
      out_len--;
    if (data[in_len - 2] == '=')
      out_len--;

    if (sizeof(D) < out_len)
      throw std::runtime_error("Data size too small");

    std::basic_string<D> out(out_len, D());

    out.resize(decode(data, &out[0], out_len));

    return std::move(out);
  }

  template <typename D, typename T>
  static std::shared_ptr<D> decode_shared_ptr(const T *data) {
    return std::move(decode_shared_ptr<D>(std::basic_string<T>(data)));
  }

  template <typename D, typename T>
  static std::shared_ptr<D>
  decode_shared_ptr(const std::basic_string<T> &data) {
    size_t in_len = get_size(data);
    if (in_len % 4 != 0)
      throw std::runtime_error("Data size is not a multiple of 4");

    size_t out_len = in_len / 4 * 3;
    if (data[in_len - 1] == '=')
      out_len--;
    if (data[in_len - 2] == '=')
      out_len--;

    if (sizeof(D) < out_len)
      out_len = sizeof(D);

    std::shared_ptr<D> out = std::shared_ptr<D>(new D());
    size_t ret = decode(data, out.get(), out_len);
    assert(ret >= out_len);

    return std::move(out);
  }

#ifdef CXX_DEFAULT_TEMPLATE_ARGUMENTS_NOT_SUPPORTED
  template <typename D, typename T>
#else
  template <typename D = char, typename T>
#endif
  static std::basic_string<D> decode_str(const T *data) {
    return std::move(decode_str<D>(std::basic_string<T>(data)));
  }

#ifdef CXX_DEFAULT_TEMPLATE_ARGUMENTS_NOT_SUPPORTED
  template <typename D, typename T>
#else
  template <typename D = char, typename T>
#endif
  static std::basic_string<D> decode_str(const std::basic_string<T> &data) {
    size_t in_len = data.size();
    if (get_size(data) % 4 != 0)
      throw std::runtime_error("Data size is not a multiple of 4");

    size_t out_len = in_len / 4 * 3;
    if (data[in_len - 1] == '=')
      out_len--;
    if (data[in_len - 2] == '=')
      out_len--;

    size_t len = out_len / sizeof(D);
    if (len * sizeof(D) < out_len) {
      size_t remaining_len = out_len - (len * sizeof(D));
      len += ((remaining_len / sizeof(D)) + (remaining_len % sizeof(D)));
    }

    std::basic_string<D> out(len, D());

    len = decode(data, &out[0], out_len);
    if (len < out_len)
      out.resize(len / sizeof(D));

    return std::move(out);
  }

  template <typename T>
  static std::vector<std::byte> decode(const std::basic_string<T> &data) {
    size_t in_len = get_size(data);
    if (in_len % 4 != 0)
      throw std::runtime_error("Data size is not a multiple of 4");

    size_t out_len = in_len / 4 * 3;
    if (data[in_len - 1] == '=')
      out_len--;
    if (data[in_len - 2] == '=')
      out_len--;

    std::vector<std::byte> out(out_len);

    size_t len = decode(data, &out[0], out_len);
    if (len < out_len)
      out.resize(len);

    return std::move(out);
  }

  template <typename T>
  static size_t get_size(const std::basic_string<T> &data) {
    static const unsigned char *decoding_table = get_decodeing_table();
    size_t size = data.size();
#if defined(CXX_FOR)
    CXX_FOR(T ch, data) {
      if (ch != (T)'=' && decoding_table[ch] == 64)
        size--;
    }
#elif defined(CXX_FOR_)
    CXX_FOR_(T ch, data) {
      if (ch != (T)'=' && decoding_table[ch] == 64)
        size--;
    }
    CXX_FOR_END
#elif defined(CXX_FOR_O)
    CXX_FOR_O(T ch, std::basic_string<T>::const_iterator, data) {
      if (ch != (T)'=' && decoding_table[ch] == 64)
        size--;
    }
    CXX_FOR_END
#endif
    return size;
  }

  template <typename T>
  static size_t decode(const std::basic_string<T> &input, const void *output,
                       size_t output_size) {
    static const unsigned char *decoding_table = get_decodeing_table();
    size_t in_len = input.size();
    if (get_size(input) % 4 != 0)
      throw std::runtime_error("Data size is not a multiple of 4");

    size_t invalid_size = 0;
    size_t out_len = output_size;
    unsigned char *out = (unsigned char *)output;

    for (size_t i = 0, j = 0; i < in_len;) {
      if (decoding_table[input[i]] == 64) {
        ++i;
        invalid_size++;
        continue;
      }

      uint32_t a = input[i] == '='
                       ? 0 & i++
                       : decoding_table[static_cast<int>(input[i++])];
      uint32_t b = input[i] == '='
                       ? 0 & i++
                       : decoding_table[static_cast<int>(input[i++])];
      uint32_t c = input[i] == '='
                       ? 0 & i++
                       : decoding_table[static_cast<int>(input[i++])];
      uint32_t d = input[i] == '='
                       ? 0 & i++
                       : decoding_table[static_cast<int>(input[i++])];

      uint32_t triple =
          (a << 3 * 6) + (b << 2 * 6) + (c << 1 * 6) + (d << 0 * 6);

      if (j < out_len)
        out[j++] = (triple >> 2 * 8) & 0xFF;
      if (j < out_len)
        out[j++] = (triple >> 1 * 8) & 0xFF;
      if (j < out_len)
        out[j++] = (triple >> 0 * 8) & 0xFF;
    }

    return (invalid_size) ? out_len - (invalid_size / 4 * 3) : out_len;
  }

private:
  static inline const unsigned char *get_decodeing_table() {
    static const unsigned char decoding_table[] = {
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 62, 64, 64, 64, 63, 52, 53, 54, 55, 56, 57,
        58, 59, 60, 61, 64, 64, 64, 64, 64, 64, 64, 0,  1,  2,  3,  4,  5,  6,
        7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 64, 64, 64, 64, 64, 64, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
        37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64};

    return decoding_table;
  }
};
} // namespace encoding
using namespace encoding;
} // namespace ext
#endif // _EXT_BASE64_
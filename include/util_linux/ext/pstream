/**
 * @file pstream
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This module implements pipe stream(ipstream/opstream) class.
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */
#pragma once

#define CXX_USE_NULLPTR
#include "stl_compat"

#ifndef _EXT_PSTREAM_
#define _EXT_PSTREAM_

#if defined(__GLIBCXX__)
#include <ext/stdio_filebuf.h>
#else
#if defined(_WIN32)
#include <Windows.h>
#include <fcntl.h>
#include <io.h>
#else
#include <unistd.h>
#endif
#endif

#include <cstring>
#include <fstream>
#include <iostream>
#include <vector>

namespace ext {
#if defined(__GLIBCXX__)
template <typename _CharT, typename _Traits = std::char_traits<_CharT>>
class basic_pipebuf : public __gnu_cxx::stdio_filebuf<_CharT, _Traits> {
  typedef __gnu_cxx::stdio_filebuf<_CharT, _Traits> T;
  using T::T;

public:
  typedef int native_handle_t;

  native_handle_t native_handle() {
    return __gnu_cxx::stdio_filebuf<_CharT, _Traits>::fd();
  }
};
#elif defined(_WIN32)
template <typename _CharT>
class basic_pipebuf : public std::basic_filebuf<_CharT> {
  typedef std::basic_filebuf<_CharT> T;

public:
  basic_pipebuf() : T(nullptr), handle_(NULL) {}
  basic_pipebuf(HANDLE handle, std::ios::openmode mode)
      : std::basic_filebuf<_CharT>(_fdopen(
            _open_osfhandle((intptr_t)handle,
                            (mode & std::ios::out) ? _O_RDWR : _O_RDONLY),
            ((mode & std::ios::out) ? "r+" : "r"))),
        handle_(handle) {}

public:
  typedef HANDLE native_handle_t;

  native_handle_t native_handle() { return handle_; }

  void swap(basic_pipebuf &other) {
    std::basic_filebuf<_CharT>::swap(other);
    std::swap(handle_, other.handle_);
  }

private:
  HANDLE handle_;
};
#else
template <typename _CharT, typename _Traits = std::char_traits<_CharT>>
class basic_pipebuf : public std::basic_streambuf<_CharT, _Traits> {
public:
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef typename traits_type::int_type int_type;
  typedef typename traits_type::pos_type pos_type;
  typedef typename traits_type::off_type off_type;
  typedef std::basic_streambuf<char_type, traits_type> streambuf_type;
#if defined(_WIN32)
  typedef HANDLE native_handle_t;
  const CXX_CONSTEXPR static native_handle_t invalid_handle = NULL;
#else
  typedef int native_handle_t;
  const CXX_CONSTEXPR static native_handle_t invalid_handle = -1;
#endif

public:
  basic_pipebuf() : handle_(invalid_handle) {}
  basic_pipebuf(native_handle_t handle, std::ios_base::openmode mode)
      : handle_(handle) {
    if (mode & std::ios::in) {
      buffer.resize(putback_begin + buffer_size);
      streambuf_type::setg(&buffer[putback_begin], &buffer[putback_begin],
                           &buffer[putback_begin]);
    }
  }

  //
  //  std::ostream
  //
protected:
  virtual int_type overflow(int_type c) {
    if (c != _Traits::eof()) {
      char_type ch = static_cast<char_type>(c);
      if (xsputn(&ch, 1) != 1)
        return _Traits::eof();
    }
    return c;
  }

  virtual std::streamsize xsputn(const char_type *s, std::streamsize num) {
#if defined(_WIN32)
    DWORD bytesWritten = 0;
    return WriteFile(handle_, s, static_cast<DWORD>(num), &bytesWritten,
                     NULL) == TRUE
               ? static_cast<std::streamsize>(bytesWritten)
               : -1;
#else
    return ::write(handle_, s, num);
#endif
  }

  //
  // std::istream
  //
protected:
  virtual int_type underflow() {
    if (streambuf_type::gptr() < streambuf_type::egptr())
      return _Traits::to_int_type(*streambuf_type::gptr());

    size_t putback_len = streambuf_type::gptr() - streambuf_type::eback();
    if (putback_len > putback_begin)
      putback_len = putback_begin;

    std::memmove(&buffer[putback_begin - putback_len],
                 streambuf_type::gptr() - putback_len, putback_len);
#if defined(_WIN32)
    DWORD bytesRead = 0;
    size_t len =
        ::ReadFile(handle_, &buffer[putback_begin],
                   static_cast<DWORD>(buffer_size), &bytesRead, NULL) == TRUE
            ? static_cast<size_t>(bytesRead)
            : 0;
#else
    size_t len = ::read(handle_, &buffer[putback_begin], buffer_size);
#endif
    if (len <= 0)
      return _Traits::eof();

    streambuf_type::setg(&buffer[putback_begin - putback_len],
                         &buffer[putback_begin], &buffer[putback_begin + len]);
    return _Traits::to_int_type(*streambuf_type::gptr());
  } // namespace ext

private:
  std::vector<char_type> buffer;
  static const size_t putback_begin = 128;
  static const size_t buffer_size = 4096;

private:
  native_handle_t handle_;

public:
  native_handle_t native_handle() { return handle_; }

  void close() {
    if (handle_ != invalid_handle) {
#if defined(_WIN32)
      CloseHandle(handle_);
#else
      ::close(handle_);
#endif
      handle_ = invalid_handle;
    }
  }
};
#endif

typedef basic_pipebuf<char> pipebuf;

#if defined(_MSC_VER) && _MSC_VER < 1600
template <std::ios::openmode M, typename T> class pstream : public T {
public:
  typedef typename pipebuf::native_handle_t native_handle_t;

  pstream() : buf_(nullptr), T(nullptr) {}
#ifdef __cpp_rvalue_references
  pstream(pstream &&other) : buf_(nullptr), T(nullptr) { swap(other); }
#endif
  pstream(native_handle_t handle)
      : buf_(new ext::pipebuf(handle, M)), T(buf_) {}
  ~pstream() { close(); }

  void swap(pstream &p) CXX_NOEXCEPT {
    std::swap(buf_, p.buf_);
    this->rdbuf(buf_);
    p.rdbuf(p.buf_);
  }
#ifdef __cpp_rvalue_references
  pstream &operator=(pstream &&rhs) {
    swap(rhs);
    return *this;
  };
#endif
  native_handle_t native_handle() { return buf_->native_handle(); }

  native_handle_t detach() {
    native_handle_t handle = buf_.native_handle();
    buf_.swap(pipebuf());
    return handle;
  }

  void close() {
    if (buf_) {
      buf_->close();
      delete buf_;
      buf_ = nullptr;
    }
  }

private:
  mutable pipebuf *buf_;
};
#else
template <std::ios::openmode M, typename T> class pstream : public T {
public:
  typedef typename pipebuf::native_handle_t native_handle_t;

  pstream() : T(nullptr) {}
#ifdef __cpp_rvalue_references
  pstream(pstream &&other) : T(nullptr) { swap(other); }
#endif
  pstream(native_handle_t handle) : T(&buf_), buf_(pipebuf(handle, M)) {}
  ~pstream() { close(); }

  void swap(pstream &p) CXX_NOEXCEPT {
    std::swap(buf_, p.buf_);
    this->rdbuf(&buf_);
    p.rdbuf(&p.buf_);
  }
#ifdef __cpp_rvalue_references
  pstream &operator=(pstream &&rhs) {
    swap(rhs);
    return *this;
  };
#endif
  native_handle_t native_handle() { return buf_.native_handle(); }

  void close() { buf_.close(); }

private:
  mutable pipebuf buf_;
};
#endif

typedef pstream<std::ios::in, std::istream> ipstream;
typedef pstream<std::ios::out, std::ostream> opstream;
} // namespace ext
#endif // _EXT_PSTREAM_

/**
 * @file callback
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This Module implements callback template class.
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */
#pragma once

#ifdef CXX_USE_BOOST
#define CXX_USE_STD_MUTEX
#include <boost/thread/mutex.hpp>

#define CXX_USE_STD_UNORDERED_MAP
#include <boost/unordered/unordered_map.hpp>

#define CXX_USE_STD_MAKE_SHARED
#include <boost/shared_ptr.hpp>
#endif // CXX_USE_BOOST

#include "stl_compat"

#if defined(CXX_MUTEX) || defined(_EXT_STD_MUTEX_)
#ifndef _EXT_CALLBACK_
#define _EXT_CALLBACK_
#include <functional>
#include <memory>
#ifndef _EXT_STD_MUTEX_
#include <mutex>
#endif

#if !defined(_EXT_STD_UNORDERED_MAP_)
#include <unordered_map>
#endif
#include "stl_compat"

#ifdef __cpp_variadic_templates
#define __CALLBACK_ARGS_DECLARATION__ const Args &...
#define __TYPE_NAME__CALLBACK_ARGS__ typename... Args
#define __CALLBACK_ARGS__ args...
#else
#define __CALLBACK_ARGS_DECLARATION__ const Args &
#define __TYPE_NAME__CALLBACK_ARGS__ typename Args
#define __CALLBACK_ARGS__ args
#endif // __cpp_variadic_templates

namespace ext {
template <__TYPE_NAME__CALLBACK_ARGS__> class callback {
public:
  typedef void *cookie;
  typedef std::function<void(__CALLBACK_ARGS_DECLARATION__)> function;

  void operator()(__CALLBACK_ARGS_DECLARATION__ args) {
    std::unique_lock<std::mutex> lk(mtx_);
    typedef std::pair<cookie, std::shared_ptr<context>> type;
    CXX_FOR(type item, data_)
    item.second->callback_(__CALLBACK_ARGS__);
  }

  cookie operator+=(function callback) {
    std::unique_lock<std::mutex> lk(mtx_);
    std::shared_ptr<context> ctx = std::make_shared<context>(callback);
    data_.insert(std::pair<cookie, std::shared_ptr<context>>(ctx->id_, ctx));
    return ctx->id_;
  }

  void operator-=(cookie cookie) {
    std::unique_lock<std::mutex> lk(mtx_);
    data_.erase(cookie);
  }

private:
  struct context {
    context(function callback) : callback_(callback) { id_ = (cookie)this; }
    cookie id_;
    function callback_;
  };

private:
  std::mutex mtx_;
  std::unordered_map<cookie, std::shared_ptr<context>> data_;
};
} // namespace ext

#endif // _EXT_CALLBACK_
#endif // defined(CXX_MUTEX) || defined(_EXT_STD_MUTEX_)

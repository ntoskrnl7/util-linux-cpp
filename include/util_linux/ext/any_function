/**
 * @file any_function
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This Module implements any_function template class.
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */
#pragma once

#define CXX_USE_STD_REMOVE_CV
#define CXX_USE_STD_REMOVE_REF
#define CXX_USE_STD_REMOVE_CVREF_T
#define CXX_USE_STD_APPLY
#include "stl_compat"

#if !defined(CXX_STD_ANY_NOT_SUPPORTED) && defined(__cpp_if_constexpr)
#ifndef _EXT_ANY_FUNCTION_
#define _EXT_ANY_FUNCTION_

#include <any>
#include <functional>
#include <stdexcept>
#include <string>
#include <type_traits>
#include <vector>

#include "type_traits"
#include "typeinfo"

namespace ext {
class invalid_argument_type : public std::invalid_argument {
public:
  explicit invalid_argument_type(const std::string &message, size_t index,
                                 const std::string &type_name)
      : std::invalid_argument(message.c_str()), index_(index),
        type_name_(type_name) {}

  explicit invalid_argument_type(const char *message, size_t index,
                                 const char *type_name)
      : std::invalid_argument(message), index_(index), type_name_(type_name) {}

  size_t index() const { return index_; }
  const std::string &type_name() const { return type_name_; }

private:
  size_t index_;
  std::string type_name_;
};

class argument_count_mismatch : public std::invalid_argument {
public:
  explicit argument_count_mismatch(const std::string &_Message, size_t count)
      : std::invalid_argument(_Message.c_str()), count_(count) {}

  explicit argument_count_mismatch(const char *_Message, size_t count)
      : std::invalid_argument(_Message), count_(count) {}

  size_t count() const { return count_; }

private:
  size_t count_;
};

class any_function_base {
public:
  virtual void push_back(std::any value) = 0;
  virtual void clear() = 0;
  virtual void set_args(const std::vector<std::any> &args) = 0;
  virtual std::any operator()() const = 0;
  virtual std::any operator()(const std::vector<std::any> args) const = 0;
};

template <typename T> class any_callable;

template <typename R, typename... Args> class any_callable<R(Args...)> {
public:
  using type = std::function<R(Args...)>;
  using return_type = R;

private:
  template <typename T> static T cast_arg(std::any arg, size_t index) {
    try {
      if constexpr (std::is_same_v<T, std::string>) {
        if (arg.type() == typeid(const char *))
          return std::move(
              std::string(std::move(std::any_cast<const char *>(arg))));
        else if (arg.type() == typeid(char *))
          return std::move(std::string(std::move(std::any_cast<char *>(arg))));
      }

      if constexpr (std::is_same_v<T, std::wstring>) {
        if (arg.type() == typeid(const wchar_t *))
          return std::move(
              std::wstring(std::move(std::any_cast<const wchar_t *>(arg))));
        else if (arg.type() == typeid(wchar_t *))
          return std::move(
              std::wstring(std::move(std::any_cast<wchar_t *>(arg))));
      }

      return std::move(std::any_cast<T>(arg));
    } catch (const std::bad_any_cast &) {
      throw invalid_argument_type("Invalid argument type : \"" +
                                      get_type_name(arg.type()) + "\"",
                                  index, get_type_name<T>());
    }
  }

  template <std::size_t... I>
  static auto any_vector_to_tuple_helper(std::index_sequence<I...>,
                                         const std::vector<std::any> &vec) {
    return std::move(std::make_tuple(
        std::move(cast_arg<std::remove_cvref_t<Args>>(vec[I], I))...));
  }

  static auto any_vector_to_tuple(const std::vector<std::any> &vec) {
    return std::move(any_vector_to_tuple_helper(
        std::make_index_sequence<sizeof...(Args)>(), vec));
  }

public:
  static std::any invoke(const type *obj, std::vector<std::any> args) {
    if (sizeof...(Args) != args.size()) {
      if (sizeof...(Args) > 0)
        throw argument_count_mismatch(
            "Argument count mismatch. You must pass " +
                std::to_string(sizeof...(Args)) + " arguments.",
            sizeof...(Args));
      else
        throw argument_count_mismatch("Do not pass arguments", 0);
      return std::any();
    }
    auto tup = std::move(any_vector_to_tuple(args));
    if constexpr (std::is_void_v<R>) {
      std::apply(*obj, tup);
      return std::any();
    } else {
      return std::apply(*obj, tup);
    }
  }
};

template <typename T>
class any_function : public any_function_base, public any_callable<T>::type {
private:
  using type = typename any_callable<T>::type;
  using type::type;
  using return_type = typename any_callable<T>::return_type;

public:
  void push_back(std::any value) override { argv_.push_back(value); }

  void clear() override { argv_.clear(); }

  void set_args(const std::vector<std::any> &args) override { argv_ = args; }

  std::any operator()() const override { return operator()(argv_); }

  std::any operator()(const std::vector<std::any> args) const override {
    return any_callable<T>::invoke(this, args);
  }

public:
  template <typename... Args> return_type call(Args &&... args) const {
    if constexpr (std::is_void_v<return_type>)
      type::operator()(std::forward<Args>(args)...);
    else
      return type::operator()(std::forward<Args>(args)...);
  }

private:
  std::vector<std::any> argv_;
};

#if defined(__cpp_deduction_guides)
template <typename R, typename... Args>
any_function(R (*)(Args...)) -> any_function<R(Args...)>;

template <typename T>
any_function(T) -> any_function<typename deduce_mem_fn<T>::type>;
#endif // defined(__cpp_deduction_guides)
} // namespace ext

#endif // _EXT_ANY_FUNCTION_
#endif // !defined(CXX_STD_ANY_NOT_SUPPORTED) && defined(__cpp_if_constexpr)
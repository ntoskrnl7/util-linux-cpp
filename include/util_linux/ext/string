/**
 * @file string
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This module implements string helper features.
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */
#pragma once

#ifndef _EXT_STRING_
#define _EXT_STRING_

#include <algorithm>
#include <ctype.h>
#include <functional>
#include <locale>
#include <string>
#include <vector>

#define CXX_USE_STD_MOVE
#define CXX_USE_STD_IS_SAME
#include "stl_compat"

namespace ext {
namespace string {

namespace movable {

#ifdef _EXT_STD_MOVE_
template <typename T> class basic_string : public std::basic_string<T> {
private:
  typedef std::basic_string<T> string_type;

public:
  basic_string(const T *ptr) : string_type(ptr) {}
  basic_string(size_t size, const T ch) : string_type(size, ch) {}
  basic_string(const string_type &s) : string_type(s) {}
  basic_string(const std::allocator<T> &ai) : string_type(ai) {}
  basic_string(const typename string_type::iterator &first,
               const typename string_type::iterator &last)
      : string_type(first, last) {}

public:
  basic_string(ext::movable<basic_string> &other) { swap(other); }
  basic_string &operator=(ext::movable<basic_string> &rhs) {
    swap(rhs);
    return *this;
  }

  basic_string &swap(basic_string &other) {
    string_type::swap(other);
    return *this;
  }
};

typedef basic_string<char> string;
typedef basic_string<wchar_t> wstring;
#else
typedef std::basic_string<char> string;
typedef std::basic_string<wchar_t> wstring;
#endif

} // namespace movable

namespace internal {
template <typename T> inline const T *trim_str() {
  CXX_IF_CONSTEXPR(std::is_same<T, char>::value)
  return (const T *)" \t\n\r\f\v";
  else return (const T *)L" \t\n\r\f\v";
}
} // namespace internal

//
// printable functions.
//

template <typename T>
inline std::basic_string<T> &rprintable(std::basic_string<T> &s) {
  s.erase(std::find_if(s.rbegin(), s.rend(), isprint).base(), s.end());
  return s;
}

template <typename T>
inline std::basic_string<T> &lprintable(std::basic_string<T> &s) {
  s.erase(s.begin(), std::find_if(s.begin(), s.end(), isprint));
  return s;
}

#if defined(__cpp_lambdas)
template <typename T>
inline std::basic_string<T> &printable(std::basic_string<T> &s) {
  s.erase(std::remove_if(s.begin(), s.end(), [](T ch) { return !isprint(ch); }),
          s.end());
  return s;
}
#else
template <typename T> bool is_not_print(T ch) { return !isprint(ch); }

template <typename T>
inline std::basic_string<T> &printable(std::basic_string<T> &s) {
  s.erase(std::remove_if(s.begin(), s.end(), is_not_print<T>), s.end());
  return s;
}
#endif

#if (!defined(_MSC_VER)) || (defined(_MSC_VER) && _MSC_VER > 1600)
template <typename T>
inline std::basic_string<T> rprintable(const std::basic_string<T> &s) {
  std::basic_string<T> val = s;
  return std::move(rprintable<T>(val));
}

template <typename T>
inline std::basic_string<T> lprintable(const std::basic_string<T> &s) {
  std::basic_string<T> val = s;
  return std::move(lprintable<T>(val));
}

template <typename T>
inline std::basic_string<T> printable(const std::basic_string<T> &s) {
  std::basic_string<T> val = s;
  return std::move(lprintable<T>(rprintable<T>(val)));
}
#endif

template <typename T> inline std::basic_string<T> rprintable(const T *s) {
  std::basic_string<T> ss(s);
  return std::move(rprintable(ss));
}

template <typename T> inline std::basic_string<T> lprintable(const T *s) {
  std::basic_string<T> ss(s);
  return std::move(lprintable(ss));
}

template <typename T> inline std::basic_string<T> printable(const T *s) {
  std::basic_string<T> ss(s);
  return std::move(printable(ss));
}

//
// trim functions.
//

template <typename T>
inline std::basic_string<T> &rtrim(std::basic_string<T> &s) {
  return s.erase(s.find_last_not_of(internal::trim_str<T>()) + 1);
}

template <typename T>
inline std::basic_string<T> &ltrim(std::basic_string<T> &s) {
  return s.erase(0, s.find_first_not_of(internal::trim_str<T>()));
}

template <typename T>
inline std::basic_string<T> &trim(std::basic_string<T> &s) {
  return ltrim<T>(rtrim<T>(s));
}

#if (!defined(_MSC_VER)) || (defined(_MSC_VER) && _MSC_VER > 1600)
template <typename T>
inline std::basic_string<T> rtrim(const std::basic_string<T> &s) {
  std::basic_string<T> val = s;
  return std::move(rtrim<T>(val));
}

template <typename T>
inline std::basic_string<T> ltrim(const std::basic_string<T> &s) {
  std::basic_string<T> val = s;
  return std::move(ltrim<T>(val));
}

template <typename T>
inline std::basic_string<T> trim(const std::basic_string<T> &s) {
  std::basic_string<T> val = s;
  return std::move(ltrim<T>(rtrim<T>(val)));
}
#endif

template <typename T> inline std::basic_string<T> rtrim(const T *s) {
  std::basic_string<T> ss(s);
  return std::move(rtrim(ss));
}

template <typename T> inline std::basic_string<T> ltrim(const T *s) {
  std::basic_string<T> ss(s);
  return std::move(ltrim(ss));
}

template <typename T> inline std::basic_string<T> trim(const T *s) {
  std::basic_string<T> ss(s);
  return std::move(trim(ss));
}

#ifdef __cpp_rvalue_references
template <typename T>
inline std::basic_string<T> rtrim(std::basic_string<T> &&s) {
  return std::move(rtrim(s));
}

template <typename T>
inline std::basic_string<T> ltrim(std::basic_string<T> &&s) {
  return std::move(ltrim(s));
}

template <typename T>
inline std::basic_string<T> trim(std::basic_string<T> &&s) {
  return std::move(trim<T>(s));
}
#endif // __cpp_rvalue_references

template <typename T> inline bool compare_char(T char1, T char2) {
  return char1 == char2;
}

template <typename T> inline bool compare_char_i(T char1, T char2) {
  if (isascii(char1) && isascii(char2) && isalpha(char1) && isalpha(char2))
    return tolower(char1) == tolower(char2);
  else
    return char1 == char2;
}

//
//  search functions.
//
namespace internal {
template <typename T>
inline typename std::basic_string<T>::const_iterator
search(const typename std::basic_string<T>::const_iterator &begin,
       const typename std::basic_string<T>::const_iterator &end,
       const std::basic_string<T> &s_str, bool case_sensitive = false) {
#ifdef __cpp_lib_boyer_moore_searcher
  if (case_sensitive)
    return std::search(begin, end,
                       std::boyer_moore_searcher(s_str.begin(), s_str.end()));
  return std::search(begin, end, s_str.begin(), s_str.end(),
                     case_sensitive ? compare_char<T> : compare_char_i<T>);
#else
  return std::search(begin, end, s_str.begin(), s_str.end(),
                     case_sensitive ? compare_char<T> : compare_char_i<T>);
#endif
}

} // namespace internal

template <typename T>
inline bool search(const std::basic_string<T> &str,
                   const std::basic_string<T> &s_str,
                   bool case_sensitive = false) {
  return internal::search(str.begin(), str.end(), s_str, case_sensitive) !=
         str.end();
}

template <typename T>
inline bool search(const T *str, const T *s_str, bool case_sensitive = false) {
  return search(std::basic_string<T>(str), std::basic_string<T>(s_str),
                case_sensitive);
}

template <typename T>
inline bool search(const T *str, const std::basic_string<T> &s_str,
                   bool case_sensitive = false) {
  return search(std::basic_string<T>(str), s_str, case_sensitive);
}

template <typename T>
inline bool search(const std::basic_string<T> &str, const T *s_str,
                   bool case_sensitive = false) {
  return search(str, std::basic_string<T>(s_str), case_sensitive);
}

//
//  equal functions.
//

template <typename T, class _InIt1>
inline bool equal(const _InIt1 &_First1, const _InIt1 &_Last1,
                  const std::basic_string<T> &str2,
                  bool case_sensitive = false) {

  return std::equal(_First1, _Last1, str2.begin(),
                    case_sensitive ? compare_char<T> : compare_char_i<T>);
}

template <typename T>
inline bool equal(const std::basic_string<T> &str1,
                  const std::basic_string<T> &str2,
                  bool case_sensitive = false) {
  if (str1.size() != str2.size()) {
    return false;
  }

  return equal(str1.begin(), str1.end(), str2, case_sensitive);
}

template <typename T>
inline bool equal(const T *str1, const T *str2, bool case_sensitive = false) {
  const std::basic_string<T> text1 = str1;
  const std::basic_string<T> text2 = str2;

  if (text1.size() != text2.size())
    return false;

  return equal(text1.begin(), text1.end(), text2, case_sensitive);
}

template <typename T>
inline bool equal(const T *str1, const std::basic_string<T> &str2,
                  bool case_sensitive = false) {
  const std::basic_string<T> text1 = str1;

  if (text1.size() != str2.size())
    return false;

  return equal(text1.begin(), text1.end(), str2, case_sensitive);
}

template <typename T>
inline bool equal(const std::basic_string<T> &str1, const T *str2,
                  bool case_sensitive = false) {
  const std::basic_string<T> text2 = str2;

  if (str1.size() != text2.size())
    return false;

  return equal(str1.begin(), str1.end(), text2, case_sensitive);
}

//
//  replace_all functions.
//

template <typename T>
inline std::basic_string<T> &
replace_all(std::basic_string<T> &str, const std::basic_string<T> &old_str,
            const std::basic_string<T> &new_str, bool case_sensitive = false) {
  if (old_str.empty())
    return str;

  typename std::basic_string<T>::const_iterator it = str.begin();
  do {
    it = internal::search(it, str.end(), old_str, case_sensitive);
    if (it != str.end()) {
      typename std::basic_string<T>::size_type pos = std::distance(
          static_cast<typename std::basic_string<T>::const_iterator>(
              str.begin()),
          it);
      str.replace(it, it + old_str.length(), new_str);
      it = str.begin() + pos + new_str.length();
    }
  } while (it != str.end());

  return str;
}

template <typename T>
inline std::basic_string<T> &replace_all(std::basic_string<T> &str,
                                         const T *old_str, const T *new_str,
                                         bool case_sensitive = false) {
  return replace_all(str, std::basic_string<T>(old_str),
                     std::basic_string<T>(new_str), case_sensitive);
}

template <typename T>
inline std::basic_string<T> &
replace_all(std::basic_string<T> &str, const T *old_str,
            const std::basic_string<T> &new_str, bool case_sensitive = false) {
  return replace_all(str, std::basic_string<T>(old_str), new_str,
                     case_sensitive);
}

template <typename T>
inline std::basic_string<T> &
replace_all(std::basic_string<T> &str, const std::basic_string<T> &old_str,
            const T *new_str, bool case_sensitive = false) {
  return replace_all(str, old_str, std::basic_string<T>(new_str),
                     case_sensitive);
}

template <typename T>
inline std::basic_string<T> replace_all(const std::basic_string<T> &str,
                                        const T *old_str, const T *new_str,
                                        bool case_sensitive = false) {
  std::string val = str;
  return replace_all(val, std::basic_string<T>(old_str),
                     std::basic_string<T>(new_str), case_sensitive);
}

template <typename SRC_T, typename DST_T>
bool convert(const std::basic_string<SRC_T> &SourceString,
             std::basic_string<DST_T> &DestinationString,
             const std::locale Locale = std::locale("")) {
#if CXX_VER >= 201103
  if (std::is_same<SRC_T, DST_T>::value)
#else
  if (typeid(SRC_T) == typeid(DST_T))
#endif
  {
    DestinationString = (std::basic_string<DST_T> &)SourceString;
    return true;
  }

  typedef std::codecvt<wchar_t, char, std::mbstate_t> codecvt_wchar;

  const codecvt_wchar &convert = std::use_facet<codecvt_wchar>(Locale);

  std::mbstate_t state = std::mbstate_t();
  size_t sourceLength = SourceString.length();

  if (sourceLength == 0) {
    DestinationString.resize(0);
    return true;
  }

  const SRC_T *source = SourceString.c_str();
  const SRC_T *sourceNext = source;

  size_t destinationLength =
      sourceLength * convert.max_length() + convert.max_length();
  std::vector<DST_T> destination(destinationLength);
  DST_T *destinationNext = &destination[0];

  codecvt_wchar::result result = codecvt_wchar::noconv;
#if CXX_VER >= 201103
  CXX_IF_CONSTEXPR(std::is_same<DST_T, char>::value)
#else
  if (typeid(DST_T) == typeid(char))
#endif
  {
    result = convert.out(
        state, (const wchar_t *)source, (const wchar_t *)&source[sourceLength],
        (const wchar_t *&)sourceNext, (char *)&destination[0],
        (char *)&destination[destinationLength - 1], (char *&)destinationNext);
  }
#if CXX_VER >= 201103
  CXX_IF_CONSTEXPR(std::is_same<DST_T, wchar_t>::value)
#else
  else if (typeid(DST_T) == typeid(wchar_t))
#endif
  {
    result = convert.in(state, (const char *)source,
                        (const char *)&source[sourceLength],
                        (const char *&)sourceNext, (wchar_t *)&destination[0],
                        (wchar_t *)&destination[destinationLength - 1],
                        (wchar_t *&)destinationNext);
  }

  if (result == codecvt_wchar::ok) {
    DestinationString = std::basic_string<DST_T>(
        (const DST_T *)&destination[0], (const DST_T *)destinationNext);
    return true;
  }

  return false;
}

template <typename DST_T, typename SRC_T>
std::basic_string<DST_T> convert(const std::basic_string<SRC_T> &SourceString,
                                 const std::locale Locale = std::locale("")) {
  std::basic_string<DST_T> destinationString;

  if (convert(SourceString, destinationString, Locale)) {
    return destinationString;
  }
#ifdef __cpp_exceptions
  throw std::runtime_error("Failed to convert :-(");
#endif
  return std::basic_string<DST_T>();
}

inline std::wstring operator!(const std::string &rhs) {
  return convert<wchar_t>(rhs);
}

inline std::string operator!(const std::wstring &rhs) {
  return convert<char>(rhs);
}

template <typename T>
inline std::vector<T> split(const std::string &str, const std::string &delim,
                            std::function<T(const std::string &)> fn) {
  std::vector<T> tokens;
  size_t prev = 0, pos = 0;
  do {
    pos = str.find(delim, prev);
    if (pos == std::string::npos)
      pos = str.length();
    std::string token = str.substr(prev, pos - prev);
    if (!token.empty())
      tokens.push_back(fn(token));
    prev = pos + delim.length();
  } while (pos < str.length() && prev < str.length());
  return tokens;
}

inline std::vector<std::string> split(const std::string &str,
                                      const std::string &delim) {
  std::vector<std::string> tokens;
  size_t prev = 0, pos = 0;
  do {
    pos = str.find(delim, prev);
    if (pos == std::string::npos)
      pos = str.length();
    std::string token = str.substr(prev, pos - prev);
    if (!token.empty())
      tokens.push_back(token);
    prev = pos + delim.length();
  } while (pos < str.length() && prev < str.length());
  return tokens;
}
} // namespace string
using namespace string;
} // namespace ext

#endif // _EXT_STRING_
/**
 * @file type_traits
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This Module implements type traits helper features.
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */

#pragma once
#ifndef _EXT_TYPE_TRAITS_
#define _EXT_TYPE_TRAITS_

#include <type_traits>

#define CXX_USE_STD_VOID_T
#include "stl_compat"

namespace ext {
#if defined(__cpp_variadic_templates)
///
/// remove_class
///
#ifndef _EXT_REMOVE_CLASS_
#define _EXT_REMOVE_CLASS_
template <typename T> struct remove_class;

template <typename R, typename C, typename... Args>
struct remove_class<R (C::*)(Args...) const> {
  using type = R(Args...);
};

template <typename R, typename C, typename... Args>
struct remove_class<R (C::*)(Args...)> {
  using type = R(Args...);
};

template <typename T> using remove_class_t = typename remove_class<T>::type;
#endif // _EXT_REMOVE_CLASS_
#endif // defined(__cpp_variadic_templates)

#if defined(__cpp_decltype) && (defined(_EXT_STD_VOID_T_) || !defined(CXX_STD_VOID_T_NOT_SUPPORTED))
//
/// deduce_mem_fn
///
#ifndef _EXT_DEDUCE_MEM_FN_
#define _EXT_DEDUCE_MEM_FN_
template <typename T, class = void> struct deduce_mem_fn {};

template <typename T>
struct deduce_mem_fn<T, std::void_t<decltype(&T::operator())>> {
  using type = remove_class_t<decltype(&T::operator())>;
};
#endif // _EXT_DEDUCE_MEM_FN_
#endif // __cpp_decltype
} // namespace ext
#endif // _EXT_TYPE_TRAITS_
